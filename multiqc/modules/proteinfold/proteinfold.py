import logging
import re

from multiqc.base_module import BaseMultiqcModule, ModuleNoSamplesFound
from multiqc.plots import bargraph

log = logging.getLogger(__name__)


class MultiqcModule(BaseMultiqcModule):
    """
    The module parses results generated by a variety of protein structure prediction programs in the [ProteinFold](https://nf-co.re/proteinfold/) pipeline.
    This includes [currently all WIP]:
        - [AlphaFold2](https://github.com/google-deepmind/alphafold)
        - [ColabFold](https://github.com/sokrypton/ColabFold) [currently not being worked on]
        - [ESMFold](https://github.com/facebookresearch/esm)
        - [RoseTTaFold-All-Atom](https://github.com/baker-laboratory/RoseTTAFold-All-Atom)
        - [HelixFold3](https://github.com/PaddlePaddle/PaddleHelix/tree/dev/apps/protein_folding/helixfold3) 

    This is intended to provide a summary of useful metrics for mass 'folding' a large set of proteins, either in terms of finishing for mulitmer interactions or comparing methods across whole proteomes. It provides a visual 'at-a-glance' report of relevant metrics (average pLDDT, iPTM, *etc*) and does not replace the per-protein interactive plot generated from nfcore/proteinfold

    ```
    Here's what some raw code looks like
    ```

    """

    def __init__(self):
        super(MultiqcModule, self).__init__(
            name="ProteinFold",
            anchor="proteinfold",
            href=["https://github.com/google-deepmind/alphafold", "https://github.com/sokrypton/ColabFold", "https://github.com/facebookresearch/esm", "https://github.com/baker-laboratory/RoseTTAFold-All-Atom", "https://github.com/PaddlePaddle/PaddleHelix/tree/dev/apps/protein_folding/helixfold3"],
            info="ProteinFold - protein structure inference methods through a single nextflow pipeline interface",
            doi=["10.1038/s41586-021-03819-2", "10.1038/s41592-022-01488-1",  "10.1126/science.ade2574", "10.1126/science.adl2528", "10.48550/arXiv.2408.16975"],
        )

